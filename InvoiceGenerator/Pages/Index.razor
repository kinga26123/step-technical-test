@page "/"
@using QuestPDF.Fluent
@using QuestPDF.Helpers
@using QuestPDF.Infrastructure

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <h1>Invoices Generator</h1>
    <ul class="invoice-cards">
        @if (invoice != null)
        {
            <li>
                <div class="invoice-info">
                    <ul class="invoice-fields">
                        <li>
                            <div class="invoice-fields-label">Order Id:</div>
                            <input @bind="invoice.Id" /></li>
                        <li>
                            <div class="invoice-fields-label">Sales Person:</div>
                            <input @bind="invoice.Sales_Person" />
                        </li>
                        <li>
                            <div class="invoice-fields-label">Confirmed Date:</div>
                            <input @bind="invoice.Order_Confirmed_Date" /></li>
                        <li>
                            <div class="invoice-fields-label">Currency Name:</div>
                            <input @bind="invoice.Currency_Name" /></li>
                        <li>
                            <div class="invoice-fields-label">Special Instructions:</div>
                            <input @bind="invoice.Special_Instructions" /></li>
                        <li>
                            <div class="invoice-fields-label">Advertiser:</div>
                            <input @bind="invoice.Invoice_Advertiser" /></li>
                        <li>
                            <div class="invoice-fields-label">Company Name:</div>
                            <input @bind="invoice.Invoice_Company_Name" /></li>
                        <li>
                            <div class="invoice-fields-label">Address 1:</div>
                            <input @bind="invoice.Invoice_Address1" /></li>
                        <li>
                            <div class="invoice-fields-label">Address 2:</div>
                            <input @bind="invoice.Invoice_Address2" /></li>
                        <li>
                            <div class="invoice-fields-label">Address 3:</div>
                            <input @bind="invoice.Invoice_Address3" /></li>
                        <li>
                            <div class="invoice-fields-label">City:</div>
                            <input @bind="invoice.Invoice_City" /></li>
                        <li>
                            <div class="invoice-fields-label">State/County:</div>
                            <input @bind="invoice.Invoice_State_County" /></li>
                        <li>
                            <div class="invoice-fields-label">Post Code:</div>
                            <input @bind="invoice.Invoice_Post_Code" /></li>
                        <li>
                            <div class="invoice-fields-label">Country:</div>
                            <input @bind="invoice.Invoice_Country_Name" /></li>
                        <li>
                            <div class="invoice-fields-label">Contact Name:</div>
                            <input @bind="invoice.Invoice_Contact_Name" /></li>
                        <li>
                            <div class="invoice-fields-label">Email Address:</div>
                            <input @bind="invoice.Invoice_Contact_Email_Address" />
                        </li>
                        @if (invoice.Items != null && invoice.Items.Any(x => x != null))
                        {
                            <li>Invoice Items:</li>
                            @foreach (var invoiceItem in invoice.Items)
                            {
                                <div class="invoice-item-cards">
                                    <ul>
                                        <li>
                                            <div class="invoice-fields-label">Order Item Id:</div>
                                            <input @bind="invoiceItem.Id" />
                                            </li>
                                        <li>
                                            <div class="invoice-fields-label">Product Name:</div>
                                            <input @bind="invoiceItem.Product_Name" />
                                            </li>
                                        <li>
                                            <div class="invoice-fields-label">Purchase Order:</div>
                                            <input @bind="invoiceItem.Purchase_Order" />
                                            </li>
                                        <li>
                                            <div class="invoice-fields-label">Item:</div>
                                            <input @bind="invoiceItem.Item" />
                                            </li>
                                        <li>
                                            <div class="invoice-fields-label">Month:</div>
                                            <input @bind="invoiceItem.Month_Name" />
                                            </li>
                                        <li>
                                            <div class="invoice-fields-label">Year:</div>
                                            <input @bind="invoiceItem.Year" />
                                            </li>
                                        <li>
                                            <div class="invoice-fields-label">Gross Price (in @invoice.Currency_Name):</div>
                                            <input @bind="invoiceItem.Gross_Price" />
                                            </li>
                                        <li>
                                            <div class="invoice-fields-label">Net Price (in @invoice.Currency_Name):</div>
                                            <input @bind="invoiceItem.Net_Price" />
                                            </li>
                                    </ul>
                                </div>
                            }
                        }
                    </ul>
                </div>
            </li>
        }
    </ul>
    <button class="btn btn-primary" @onclick="GeneratePdf">Submit</button>
</div>
		
@code {
    Invoice invoice = new();
    double? total_gross;
    double? total_net;
    protected override async Task OnInitializedAsync()
    {
        //simulates getting data from db as json. Go to url/invoice to view json data returned.
        invoice = await HttpClient.GetFromJsonAsync<Invoice>(NavigationManager.BaseUri + "invoice");
    }

    void GeneratePdf()
    {
        if (invoice != null)
        {
            total_gross = invoice.Items.Select(x => x.Gross_Price).Sum();
            total_net = invoice.Items.Select(x => x.Net_Price).Sum();

            Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);

                    page.Header().Text("Step Communications").FontSize(30);

                    page.Content()
                    .PaddingVertical(1, Unit.Centimetre)
                    .Column(column => 
                    {
                        column.Spacing(10);
                        column.Item().Row(row => 
                        {
                            row.RelativeItem().Column(innerColumn => 
                            {
                                innerColumn.Item().Text("BILLED TO:").SemiBold();
                                innerColumn.Item().Text(invoice.Invoice_Contact_Name);
                                innerColumn.Item().Text(invoice.Invoice_Advertiser);
                                innerColumn.Item().Text(invoice.Invoice_Company_Name);
                                innerColumn.Item().Text(text => 
                                {
                                    text.Span(invoice.Invoice_Address1);
                                    if (invoice.Invoice_Address2 != null && invoice.Invoice_Address2.Any())
                                        text.Span(", " + invoice.Invoice_Address2);
                                    if (invoice.Invoice_Address3 != null && invoice.Invoice_Address3.Any())
                                        text.Span(", " + invoice.Invoice_Address3);
                                    if (invoice.Invoice_State_County != null && invoice.Invoice_State_County.Any())
                                        text.Span(", " + invoice.Invoice_State_County);
                                    text.Span(", " + invoice.Invoice_Post_Code);
                                });
                                innerColumn.Item().Text(invoice.Invoice_Country_Name);
                                innerColumn.Item().Text(invoice.Invoice_Contact_Email_Address);
                            });

                            row.RelativeItem().Column(innerColumn =>
                            {
                                innerColumn.Item().AlignRight().Text("Invoice No. " + invoice.Id);
                                innerColumn.Item().AlignRight().Text(invoice.Order_Confirmed_Date.ToShortTimeString());
                                innerColumn.Item().AlignRight().Text(invoice.Order_Confirmed_Date.ToLongDateString());
                                innerColumn.Item().AlignRight().Text(invoice.Special_Instructions);
                            });
                        });

                        column.Item().Table(table => 
                        {
                            table.ColumnsDefinition(columns => 
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });
                            
                            table.Cell().Padding(1,Unit.Millimetre).Text("Order Item Id");
                            table.Cell().Padding(1,Unit.Millimetre).Text("Product Name");
                            table.Cell().Padding(1,Unit.Millimetre).Text("Purchase Order");
                            table.Cell().Padding(1,Unit.Millimetre).Text("Item");
                            table.Cell().Padding(1,Unit.Millimetre).Text("Month");
                            table.Cell().Padding(1,Unit.Millimetre).Text("Year");
                            table.Cell().Padding(1,Unit.Millimetre).Text($"Gross Price ({invoice.Currency_Name})");
                            table.Cell().Padding(1,Unit.Millimetre).Text($"Net Price ({invoice.Currency_Name})");
                            table.Cell().ColumnSpan(8).Background(Colors.BlueGrey.Medium).Height(1);

                            foreach (var item in invoice.Items)
                            {
                                table.Cell().Text(item.Id.ToString());
                                table.Cell().Text(item.Product_Name);
                                table.Cell().Text(item.Purchase_Order);
                                table.Cell().Text(item.Item);
                                table.Cell().Text(item.Month_Name);
                                table.Cell().Text(item.Year.ToString());
                                table.Cell().Text(item.Gross_Price.ToString());
                                table.Cell().Text(item.Net_Price.ToString());
                                table.Cell().ColumnSpan(8).Background(Colors.BlueGrey.Medium).Height(1);
                            }
                            table.Cell().ColumnSpan(5);
                            table.Cell().Text("Total:").SemiBold();
                            table.Cell().Text(total_gross.ToString());
                            table.Cell().Text(total_net.ToString());
                        });
                        
                    });
                    page.Footer().Text(invoice.Sales_Person);
                });
            })
            .GeneratePdf("./PdfLibrary/CreatedPdf.pdf");
         }
    }
}